#
# Generate a +VERSIONING script used by FILES and INSTALL to perform common
# operations on version control software used to store, retrieve and merge
# package configuration files during installation and upgrade operations. 
#
case "${STAGE},$1" in
UNPACK,|UNPACK,+VERSIONING)
	${CAT} > ./+VERSIONING << 'EOF'
#!@SH@
#
# +VERSIONING - operate on version control systems
# set VCS_CONF_FILES=yes in order to enable configuration file version tracking!
#
# This script calls VCS software, "rcs" by default, in order to store revisions
# of configuration files. This is done by the "REGISTER" action, which takes 
# the path to an example configuration file as argument.
# Said file should be placed in the VCS working directory by the "files" script
# VERSIONING only handles the storage of revisions inside a vcs.
# Once all configuration files for a package are registered, files should call
# the COMMIT action, which will commit changes on backends that support
# atomic transactions (if using rcs, commit won't execute further operations).
# MERGE calls RCS merge to attempt a 3-way merge between the copy of an  
# installed configuration file, its original revision and the last example file
# as provided by the package. This is a non-interactive merge, if successful
# "files" will install the output in place of the existing configuration.
# CHECKOUT and CHECKOUT-FIRST exist to assist "files" in retrieving revisions
# before attempting an automatic merge.  
# Files only attempts to automatically merge changes if the environment
# variable VCSAUTOMERGE is set to "yes". A backup of the installed configuration
# is taken first, and user modified configuration files are stored separately,
# in order to enable for a quick restoration of the last known working file.
# PREPARE is called before registering files: under some VCSs it checks
# that the working directory and/or the remote repository is correctly
# initialized, and initializes it otherwise. 
# The VCSDIR environment variable is read to set the working directory,
# under which the repository will also reside, if a local vcs is being used.
# It defaults to VARBASE/confrepo.
# The VCS backend to use can be set via VCS environment variable, and defaults
# to RCS (Revision Control System).
# REMOTEVCS, if set, must contain a string that the chosen VCS understands as
# an URI to a remote repository, including login credentials if not specified
# through other means. This is non standard across different backends, and
# additional environment variables and cryptographic material 
# may need to be provided. 
# Remember, ssh keys must be placed under $HOME/.ssh, except when you are root.
# Because we drop privileges to the user "pkgvcsconf", place keys at pkgvcsconf
# own HOME directory, under .ssh/, or run an accessible ssh-agent socket and
# unlock the required key via ssh-add.
# 
# PULL tries to deploy configuration from a remote repository. It needs
# REMOTEVCS to be set, and gets called from +INSTALL if VCSCONFPULL=yes
#
# The remote configuration repository should contain branches named
# according to the following convention:
# category_pkgName_pkgVersion_compatRangeStart_compatRangeEnd_systemRole
# an optional field may exist that explicitates part of the system hostname
# category_pkgName_pkgVersion_compatRangeStart_compatRangeEnd_systemRole_hostname
#
# the branch should contain needed configuration files. Their path relative
# to the repository is then prepended with a "/" and files force copied
# to the system and chmod 0600 executed on them.
# Permission handling and removal upon package uninstallation are not supported.
#
# The branch to be used, among the available ones, is chosen this way:
# branches named according to the convention that provide configuration
# for category/packageName are filtered from the VCS output;
# then, all branches whose ranges are compatible with the version of the
# package being installed are selected. The upper bound of the range is
# excluded as a compatible release if using sequence based identifiers.
# If system role is set through the ROLE environment variable, 
# and it's different from "any",
# and branches exists whose role is different from "any", then their
# role gets compared with the one defined on the system or in pkg_add config.
# The last part of the branch name is optional and, if present, is compared
# character by character with the system hostname, 
# finally selecting the branches that best match it.
# As an example, a branch named mail_postfix_3.3.0_3.0.0_3.3.20_mailrelay_ams
# will match with system hostname amsterdam09.
# A system with its ROLE unspecified or set to ANY will select branches
# independently of the role they are created for, scoring and using the one
# with the best matching optional hostname and/or nearest to the target release
# as explained below:
# The checks now further refine the candidates: if a branch pkgVersion exactly
# corresponds with the version of the package being installed,
# that branch gets selected, otherwise the procedure uses the one
# which is closest to the package version being installed.
# non numerical values in package versions are accounted for
# when checking for an exact match, and are otherwise ignored.
# Only integer versions and dot-separated sequence based identifiers are
# understood when checking for compatible software ranges and for the closest
# branch, if no branch exactly matches with the package version being installed.
# Dates are handled provided they follow the ISO 8601 scheme: YYYY-MM-DD, YYYYMMDD 
#
# Usage: ./+VERSIONING REGISTER|CHECKOUT|CHECKOUT-FIRST [examplefile]
#	 ./+VERSIONING MERGE [examplefile] [firstrevision]
#	 ./+VERSIONING COMMIT [message]
#	 ./+VERSIONING PRAPARE
#	 ./+VERSIONING PULL PKGPATH PKGVERSION PKGNAME 
#
AWK="@AWK@"
CAT="@CAT@"
CHMOD="@CHMOD@"
CHOWN="@CHOWN@"
DIRNAME="@DIRNAME@"
ECHO="@ECHO@"
FIND="@FIND@"
GREP="@GREP@"
LS="@LS@"
MKDIR="@MKDIR@"
MV="@MV@"
PWD_CMD="@PWD_CMD@"
RM="@RM@"
RMDIR="@RMDIR@"
SED="@SED@"
SORT="@SORT@"
TAIL="@TAIL@"
TEST="@TEST@"
TR="@TR@"
TRUE="@TRUE@"
RCS="@RCS@"
CI="@CI@"
CO="@CO@"
CP="@CP@"
CUT="@CUT@"
MERGE="@MERGE@"
WC="@WC@"

SELF=$0
ACTION=$1
CFILE=$2
FIRSTFILE=$3
exitcode=0

#VCSDIR: user set environment variable, the working directory under which a local repository may also be kept
_VCSDIR="${VCSDIR:-@VARBASE@/confrepo}"

#VCS: the versioning system to be used. Defaults to rcs, other solutions are searched in $PATH
_VCS="${VCS:-rcs}"
case "${_VCS}" in
[Rr][Cc][Ss])
	_VCS=rcs
	;;
[Gg][Ii][Tt])
	_VCS=git
	;;
[Cc][Vv][Ss])
	_VCS=cvs
	;;
[Hh][Gg])
	_VCS=mercurial
	;;
[Ss][Vv][Nn])
	_VCS=subversion
	;;
[Mm][Ee][Rr][Cc][Uu][Rr][Ii][Aa][Ll])
	_VCS=mercurial
	;;
[Ss][Uu][Bb][Vv][Ee][Rr][Ss][Ii][Oo][Nn])
	_VCS=subversion
	;;
esac

#REMOTEVCS: set the URI to the remote repository, leave unset or set to no in order to use a local repository 
#the URI, while required for pull/configuration deployment mode, does not enable it. by default the remote is only used to store the system configuration 
_REMOTE="${REMOTEVCS:-no}"
case "${_REMOTE}" in
[Nn][Oo])
	_REMOTE=no
	;;
esac
if ${TEST} "$_VCS" = "cvs" -o "$_VCS" = "CVS"; then
	if ${TEST} "$_REMOTE" != "no"; then
		_CVSROOT="$_REMOTE"
	else
		_CVSROOT="${_VCSDIR}/CVSROOT"
	fi
fi
#ROLE: the system role, used in configuration deploy mode. Defaults to any if unset
_ROLE="${ROLE:-any}"
case "${_ROLE}" in
[Aa][Nn][Yy])
	_ROLE=any
	;;
esac
execute()
{
	if ${TEST} "${USER}" = "root"; then
		su -m pkgvcsconf -c "$1"
		return $?
	else
		eval $1
		return $?
	fi
}
pkgchown()
{
	_restoreDir="$(${PWD_CMD})"
	if ! ${ECHO} "$1" | ${GREP} -Fq "${_VCSDIR}"; then
		${ECHO} "Path \"$1\" not under VCSDIR: \"${_VCSDIR}\""
		return 1
	fi
	if ${TEST} -d "${_VCSDIR}"; then
		${CHMOD} 700 "${_VCSDIR}"
		${CHOWN} pkgvcsconf:pkgvcsconf "${_VCSDIR}"
	fi
	if ${TEST} -d "$1"; then
		if ${TEST} -n "$(${FIND} "$1" -perm -2000 -or -perm -4000 -print -quit 2>/dev/null)"; then
			${ECHO} "SUID/SGID files under $1, refusing to run CHOWN -R"
		else
			${CHMOD} 700 "$1"
			${CHOWN} -R pkgvcsconf:pkgvcsconf "$1"
		fi
		if ${TEST} "$1" = "${_VCSDIR}"; then
			return 0
		fi
	fi
	if ${TEST} -f "$1"; then
		if ${TEST} -u "$1" -o -g "$1"; then
			${ECHO} "SUID/SGID file at $1, refusing to chown it"
		else
			${CHMOD} 600 "$1"
			${CHOWN} pkgvcsconf:pkgvcsconf "$1"
		fi
		_dirs=$(${DIRNAME} "$1")
	else
		_dirs="$1"
	fi
	_dirsplit=$(${ECHO} "${_dirs}" | ${AWK} -F "${_VCSDIR}" '{print $2}'| ${TR} "/" " " )
	cd "${_VCSDIR}"
	for dir in ${_dirsplit}
		do
			if ${TEST} -d "${dir}"; then
					if ! execute "${TEST} -r \"${dir}\" -a -w \"${dir}\""; then
						${CHMOD} 700 "${dir}"
						${CHOWN} pkgvcsconf:pkgvcsconf "${dir}"
					fi
					cd "${dir}"
			fi
		done
	cd "${_restoreDir}"
}
if ${TEST} "${USER}" = "root"; then
	drop=${TRUE}
else
	drop=${FALSE}
fi

case $ACTION in
PREPARE)
		cd "${_VCSDIR}"
		case "${_VCS}" in
		"cvs")
			execute "cvs -d \"${_CVSROOT}\" rlog defaults 1>/dev/null"
			repostatus=$?
			if ${TEST} ! ${repostatus} -eq 0; then
				if ${TEST} "${_REMOTE}" = "no"; then	
					execute "cvs -d \"${_CVSROOT}\" init"
					exitcode=$?
				fi
				for module in "automerged" "defaults" "user"
					do
						if ${TEST} -d "${_VCSDIR}/${module}" -a -r "${_VCSDIR}/${module}"; then
							if ${drop}; then
								pkgchown "${_VCSDIR}/${module}"
							fi
							cd "${_VCSDIR}/${module}"
							execute "cvs -d \"${_CVSROOT}\" import -m \"auto import preexisting ${module} files\" \"${module}\" auto start 1>/dev/null"
						fi
					
					done
				cd "${_VCSDIR}"
				for module in "automerged" "defaults" "user"
					do
						execute "cvs -d \"${_CVSROOT}\" checkout -R \"${module}\""
					done	
			fi
			cd "${_VCSDIR}"
			for module in "automerged" "defaults" "user"
				do
					if ${drop}; then
						pkgchown "${_VCSDIR}/${module}"
					fi
					execute "cvs -d \"${_CVSROOT}\" update -A -R \"${module}\""
				done
			;;
		"subversion")
			if ${drop}; then
				pkgchown "${_VCSDIR}/defaults"
			fi
			execute "svn info \"${_VCSDIR}/defaults\" > /dev/null"
			if ${TEST} ! $? -eq 0; then
				if ${TEST} "$_REMOTE" = "no"; then
					${RM} -fr "${_VCSDIR}/localsvn" 2>/dev/null
					execute "svnadmin create \"${_VCSDIR}/localsvn\""
					for subdir in "automerged" "defaults" "user"
						do
							execute "svn mkdir file:\/\/\"${_VCSDIR}/localsvn/${subdir}\" -m \"create ${subdir} conf dir\""
							if ${drop}; then
								pkgchown "${_VCSDIR}/${subdir}"
							fi
							execute "svn co file:\/\/\"${_VCSDIR}/localsvn/${subdir}\" \"${_VCSDIR}/${subdir}\""
						done
				else
					#manually migrate to a remote repository, if needed
					for subdir in "automerged" "defaults" "user"
						do
							if ${TEST} -d "${_VCSDIR}/${subdir}"; then
								if ${drop}; then
									pkgchown "${_VCSDIR}/${subdir}"
								fi
								execute "svn import -m \"initial import\" \"${_VCSDIR}/${subdir}\" \"${_REMOTE}/${subdir}\""
							else
							       execute "svn mkdir \"${_REMOTE}/${subdir}\""
							fi
							execute "svn co \"${_REMOTE}/${subdir}\" \"${_VCSDIR}/${subdir}\""
						done
				fi
			fi	
				execute "svn info \"${_VCSDIR}/defaults\" > /dev/null"
				exitcode=$?
				cd "${_VCSDIR}"
				execute "svn update \"${_VCSDIR}/defaults\" \"${_VCSDIR}/user\" \"${_VCSDIR}/automerged\" > /dev/null"
			;;
		"git")
			if ${drop} && ${TEST} -d "${_VCSDIR}/.git"; then
				pkgchown "${_VCSDIR}/.git"
			fi
			execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" status > /dev/null"
			gitstatus=$?
			#this script won't clone a remote repository if a local git repo already exists in the VCSDIR.
			#just setting $REMOTE won't suffice, manually move over data and clone the repo first or use git remote add
			if ${TEST} ! ${gitstatus} -eq 0; then
				execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" init"
				exitcode=$?
				if ${TEST} "${_REMOTE}" != "no"\
				&& ${TEST} $exitcode -eq 0; then
					execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" remote add origin \"${_REMOTE}\""
					exitcode=$?
				fi
			else
				if ${TEST} "$_REMOTE" != "no"; then
					if execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" remote | ${GREP} -Fq \"origin\""; then
						execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" remote remove origin"
						execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" remote add origin \"${_REMOTE}\""
						#populate the remote repo if empty
						#prefer losing remote status over local status
						execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" push origin master"
						exitcode=$?
				 	else	
						execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" remote add origin \"${_REMOTE}\""
						exitcode=$?
					fi
				fi
				 
			fi
			if ${TEST} $exitcode -eq 0 -a ! "${_REMOTE}" = "no"; then
				execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" pull origin master"
			fi 
			;;
		"mercurial")
			if ${drop} && ${TEST} -d "${_VCSDIR}/.hg"; then
				pkgchown "${_VCSDIR}/.hg"
			fi
			execute "hg --repository \"${_VCSDIR}\" summary > /dev/null"
			if ${TEST} ! $? -eq 0; then
				execute "hg init \"${_VCSDIR}\""
				exitcode=$?
				if ${TEST} "${_REMOTE}" != "no"; then
					execute "hg --repository \"${_VCSDIR}\" pull \"${_REMOTE}\""
					execute "hg update -C -R \"${_VCSDIR}\""
					execute "hg --repository \"${_VCSDIR}\" summary > /dev/null"
					exitcode=$?
				fi
			else
				if ${TEST} "$_REMOTE" != "no"; then
					execute "hg clone . \"${_REMOTE}\""
					execute "hg --repository \"${_VCSDIR}\" push \"${_REMOTE}\""
					execute "hg --repository \"${_VCSDIR}\" pull \"${_REMOTE}\""
				fi
			fi
			;;	
		"rcs")
			if ${drop}; then
				pkgchown "${_VCSDIR}"
			fi
			;;
		*)
			${ECHO} "${_VCS}: unsupported versioning system"
			exitcode=2
			;;
		esac
	;;
REGISTER)
	if ${drop}; then
		pkgchown "${CFILE}"
	fi
	case "${_VCS}" in
	"rcs")
		execute "${RCS} -U \"${CFILE}\" > /dev/null"
		execute "${CI} -u \"${CFILE}\""
		exitcode=$?
		;;
	"cvs")
		_PATHSPLIT=$(${ECHO} "${CFILE}" | ${AWK} -F "//" '{print $2}')
		cd $(${ECHO} "${CFILE}" | ${AWK} -F "//" '{print $1}')
		OLDIFS="${IFS}"
		IFS="/"
		_cvsstatus=0
		for curdir in ${_PATHSPLIT}
			do
				execute "cvs -d \"${_CVSROOT}\" add \"${curdir}\"" 
				if ${TEST} ! $? -eq 0; then
					exitcode=1
				else
					cd "$curdir" 2>/dev/null
				fi
			done
		IFS="${OLDIFS}"
		;;
	"git")
		cd "${_VCSDIR}"
		execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" add -f \"${CFILE}\""
		exitcode=$?
		;;
	"mercurial")
		cd "${_VCSDIR}"
		execute "hg --repository \"${_VCSDIR}\" add \"${CFILE}\""
		exitcode=$?
		;;
	"subversion")
		_PATHSPLIT=$(${ECHO} "${CFILE}" | ${AWK} -F "//" '{print $2}')
		cd $(${ECHO} "${CFILE}" | ${AWK} -F "//" '{print $1}')
		_svnstatus=0
		OLDIFS="${IFS}"
		IFS="/"
		for curdir in ${_PATHSPLIT}
		do
			execute	"svn add --force --depth=empty \"${curdir}\""
			if ${TEST} ! $? -eq 0; then
				exitcode=1
			else
				cd "${curdir}" 2>/dev/null
			fi
		done
		IFS="${OLDIFS}"
		;;
	*)
		${ECHO} "${_VCS}: unsupported versioning system. I shouldn't be there!"
		exitcode=2
		;;
	esac
	;;
COMMIT)
	cd "${_VCSDIR}"
	case "${_VCS}" in
	"cvs")
		execute "cvs -Q -d \"${_CVSROOT}\" commit -R -m \"pkgsrc: $2\""
		if ${TEST} $? -eq 0; then
			${ECHO} "Conf commit: pkgsrc: $2"
		else
			${ECHO} "Failed to commit conf: $2"
			exitcode=3
		fi
		;;
	"git")
		execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" commit -m \"pkgsrc: $2\""
		gitcommitstatus=$?
		if ${TEST} ${gitcommitstatus} -eq 0; then
			${ECHO} "Conf commit: pkgsrc: $2"
		else
			${ECHO} "Failed to commit conf: $2"
			exitcode=3
		fi
		if ${TEST} "$_REMOTE" != "no"; then
			execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" push origin master"
			#even if it fails, a local copy exists
			if ${TEST} ! $? -eq 0; then
				${ECHO} "git: failed to push changes to the remote repository ${_REMOTE}"
			fi
		fi
		;;
	"mercurial")
		execute "hg --repository \"${_VCSDIR}\" commit -m \"pkgsrc: $2\" --user pkgsrc > /dev/null"
		hgcommitstatus=$?
		if ${TEST} ${hgcommitstatus} -eq 0; then
			${ECHO} "Conf commit: pkgsrc: $2"
		else
			${ECHO} "Failed to commit conf: $2"
			exitcode=3
		fi
		if ${TEST} "${_REMOTE}" != "no"; then
			execute "hg --repository \"${_VCSDIR}\" push \"${_REMOTE}\""
			if ${TEST} ! $? -eq 0; then
				${ECHO} "hg: failed to push changes to the remote repository ${_REMOTE}"
			fi
		fi
		;;
	"subversion")
		_svnexitstatus=1
		for dir in "defaults" "user" "automerged"
			do
				if ${drop} && ! execute "${TEST} -r \"${_VCSDIR}/${dir}\""; then
					pkgchown "${_VCSDIR}/${dir}"
				fi

				cd "${_VCSDIR}/${dir}"
				execute "svn commit -m \"pkgsrc: $2\" 2>/dev/null"
				if ${TEST}  $? -eq 0; then
					_svnexitstatus=0
					#at least one worked
				fi
			done
		if ${TEST} ${_svnexitstatus} -eq 0; then
			${ECHO} "Conf commit: pkgsrc: $2"
		else
			${ECHO} "Failed to commit conf: $2"
			exitcode=3
		fi
		;;
	*)
		;;
	esac
	;;
CHECKOUT)
	if ${drop}; then
		pkgchown "${CFILE}"
	fi
	case "${_VCS}" in
	"rcs")
		execute "${CO} -f \"${CFILE}\""
		exitcode=$?
		;;
	"cvs")
		cd "${_VCSDIR}"
		_PATHSPLIT=$(${ECHO} "${CFILE}" | ${AWK} -F "${_VCSDIR}" '{print $2}' | ${SED} 's@//@/@' | ${SED} 's@/@@')
		execute "cvs -d \"${_CVSROOT}\" co \"${_PATHSPLIT}\""
		;;
	"git")
		if ${drop}; then
			pkgchown "${_VCSDIR}/.git"
		fi
		cd "${_VCSDIR}"
		execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" checkout -- \"${CFILE}\""
		;;
	"subversion")
		if ${drop}; then
			pkgchown "${_VCSDIR}/localsvn"
		fi
		cd "${_VCSDIR}"
		_PATHSPLIT=$(${ECHO} "${CFILE}" | ${AWK} -F "${_VCSDIR}" '{print $2}')
		if ${TEST} "${_REMOTE}" = "no"; then
			execute "svn export --force file:\/\/\"${_VCSDIR}/localsvn/${_PATHSPLIT}\" \"${CFILE}\""
		else
			execute "svn export --force \"${_REMOTE}/${_PATHSPLIT}\" \"${CFILE}\""
		fi
		;;
	"mercurial")
		if ${drop}; then
			pkgchown "${_VCSDIR}/.hg"
		fi
		cd "${_VCSDIR}"
		execute "hg --repository \"${_VCSDIR}\" cat -r tip \"${CFILE}\" > \"${CFILE}\""
		;;
	*)
		${ECHO} "${_VCS}: unsupported versioning system"
		exitcode=2
		;;
	esac
	;;
#checkout the initial revision of the file, used in the 3-way merge
CHECKOUT-FIRST)
	if ${drop}; then
		pkgchown "${CFILE}"
	fi
	case ${_VCS} in
	"rcs")
		execute "${CO} -f1.1 \"${CFILE}\""
		exitcode=$?
		;;
	"cvs")
		cd "${_VCSDIR}"
		_PATHSPLIT=$(${ECHO} "${CFILE}" | ${AWK} -F "${_VCSDIR}" '{print $2}' | ${SED} 's@//@/@' | ${SED} 's@/@@')
		execute "cvs -d \"${_CVSROOT}\" co -r1.1 \"${_PATHSPLIT}\""
		;;
	"git")
		if ${drop}; then
			pkgchown "${_VCSDIR}/.git"
		fi
		cd "${_VCSDIR}"
 		_firstRev=$(execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" rev-list HEAD \"${CFILE}\"" | ${TAIL} -n 1) 
		execute "git --git-dir=\"${_VCSDIR}/.git\" --work-tree=\"${_VCSDIR}\" checkout ${_firstRev} -- \"${CFILE}\""
		;;
	"mercurial")
		if ${drop}; then
			pkgchown "${_VCSDIR}/.hg"
		fi
		cd "${_VCSDIR}"
		_PATHSPLIT=$(${ECHO} "${CFILE}" | ${AWK} -F "${_VCSDIR}" '{print $2}' | ${CUT} -c 2-)
		execute "hg --repository \"${_VCSDIR}\" cat -r \"first(file(\"${_PATHSPLIT}\"),1)\" \"${CFILE}\" > \"${CFILE}\""
		;;
	"subversion")
		cd "${_VCSDIR}"
		_PATHSPLIT=$(${ECHO} "${CFILE}" | ${AWK} -F "${_VCSDIR}" '{print $2}')
		if ${TEST} "${_REMOTE}" = "no"; then
			_firstRev=$(execute "svn log --xml -r 1:HEAD --limit 1 file:\/\/\"${_VCSDIR}/localsvn/${_PATHSPLIT}\"" | ${AWK} -F\"  '/revision=/ {print $2}')
			execute "svn export --force --revision ${_firstRev} file:\/\/\"${_VCSDIR}/localsvn/${_PATHSPLIT}\" \"${CFILE}\""
		else
			_firstRev=$(execute "svn log --xml -r 1:HEAD --limit 1 \"${_REMOTE}/${_PATHSPLIT}\"" | ${AWK} -F \" '/revision=/ {print $2}')
			execute "svn export --force --revision ${_firstRev} \"${_REMOTE}/${_PATHSPLIT}\" \"${CFILE}\""
		fi
		;;
	*)
		${ECHO} "${_VCS}: unsupported versioning system"
		exitcode=2
		;;
	esac
	;;
MERGE)
	${MERGE} "${FIRSTFILE}.automerge" "${FIRSTFILE}" "${CFILE}"
	exitcode=$?
	;;
PULL)
	#change in spec: branch name contains package name
	#category_baseName_pkgVersion_rangeStart_rangeEnd_systemRole_optionalHostname
	#remember to set the env variables $ROLE and $HOSTNAME
	${ECHO} "Trying to deploy configuration from ${_REMOTE} via ${_VCS}"
	exitcode=0
	branchFound=no
	compatibleBranches=""
	branchName=""
	category=$(${ECHO} "$2" | ${AWK} -F "/" '{print $1}')
	name=$(${ECHO} "$2" | ${AWK} -F "/" '{print $2}')
	exactVersion=$3
	shortVersion=$(${ECHO} $4 | ${AWK} -F "${name}" '{print $2}' | ${TR} -dc '[0-9].')
	branchesOutput=""
	_TEMPDIR="/tmp/pkgsrcdeploy-${RANDOM}"
	while ${TEST} -d ${_TEMPDIR}; do
		#this should never happen!
		${RM} -fr "${_TEMPDIR}"
		_TEMPDIR="/tmp/pkgsrcdeploy-${RANDOM}"
	done
	execute "${MKDIR} -p \"${_TEMPDIR}\""
	execute "${CHMOD} 0700 \"${_TEMPDIR}\""
	cd "${_TEMPDIR}"
	case "${_VCS}" in
		"git")
			_output=$(execute "git ls-remote --refs \"${_REMOTE}\" \"${category}\"_\"${name}\"\"_*\"")
			exitcode=$?
			_output=$(${ECHO} "${_output}" | ${AWK} -F "refs/heads/" '{print $2}')
			;;
		"subversion")
			if ! ${ECHO} "${_REMOTE}" | ${GREP} -Fq "/branches"; then
				_REMOTE="${_REMOTE}/branches/"
			fi
			_output=$(execute "svn ls \"${_REMOTE}\"")
			exitcode=$?
			_output=$(${ECHO} "${_output}" | ${SED} 's@/@@g' | ${GREP} "${category}_${name}_")
			#it would be more accurate to iterate over single branch names, split them and check for category_name
			;;
		#Mercurial, CVS require to checkout the remote repository locally before listing branches...
		"mercurial")
			execute "hg clone \"${_REMOTE}\" \"${_TEMPDIR}/work\""
			exitcode=$?
			if ${TEST} ${exitcode} -eq 0; then
				_output=$(execute "hg branches -R \"${_TEMPDIR}/work\"" | ${AWK} -v search="${category}_${name}_" '$0 ~search {print $1}')
				exitcode=$?
			fi	
			;;
		"rcs"|*)
			${ECHO} "Configuration deploy: ${_VCS} is not supported"
			if ${TEST} -z "${VCS}"; then
				${ECHO} "Set VCS to use configuration deploy in pkgsrc! Supported solutions are git, svn and hg"
			fi
			exitcode=2
			;;
	esac
	if ${TEST} ${exitcode} -eq 0 -a -n "${_output}"; then 
		#sanitize the output first
		for branch in ${_output}
			do
				if ${TEST} $(${ECHO} "${branch}" | ${GREP} -o "_" | ${WC} -l) -gt 4 && \
					${TEST} "$(${ECHO} ${branch} | ${AWK} -F "_" '{print $1}')" = ${category} && \

					${TEST} "$(${ECHO} ${branch} | ${AWK} -F "_" '{print $2}')" = ${name} && \
					${TEST} -n "$(${ECHO} ${branch} | ${AWK} -F "_" '{print $3}' | ${TR} -dc '[0-9]')" && \
					${TEST} -n "$(${ECHO} ${branch} | ${AWK} -F "_" '{print $4}' | ${TR} -dc '[0-9]')" && \
					${TEST} -n "$(${ECHO} ${branch} | ${AWK} -F "_" '{print $5}' | ${TR} -dc '[0-9]')"; then
						compatibleBranches="${branch} ${compatibleBranches}"
				else
					${ECHO} "Warning: ignoring branch with invalid naming: ${branch}"
					${ECHO} "category_packageName_packageVersion_compatRangeStart_compatRangeEnd_systemRole_optionalHostname"
				fi
			done
		_output=${compatibleBranches}
		compatibleBranches=""
		for branch in ${_output}
			do
				_rangeStart=$(${ECHO} ${branch} | ${AWK} -F "_" '{print $4}')
				_rangeEnd=$(${ECHO} ${branch} | ${AWK} -F "_" '{print $5}')
				_branchRole=$(${ECHO} ${branch} | ${AWK} -F "_" '{print $6}')
				if ${ECHO} ${branch} | ${GREP} -Fq '.'; then
					if ! ${ECHO} ${shortVersion} | ${GREP} -Fq '.'; then
						${ECHO} "${branch}: branch naming incompatible with package version naming!"
						continue
					fi
					#compare versions
					_rangeStartLTshortVersion=true
					_rangeEndGTshortVersion=false
					_groupCounter=1
					for intGroup in $(${ECHO} ${shortVersion} | ${SED} 's/\./ /g')
						do
							_rangeStartGroup=$(${ECHO} ${_rangeStart} \
							| ${AWK} -F "." -v fieldnum="${_groupCounter}" '{print $fieldnum}')
							_rangeEndGroup=$(${ECHO} ${_rangeEnd} \
							| ${AWK} -F "." -v fieldnum="$_groupCounter" '{print $fieldnum}')
							if ${TEST} -n "${_rangeStartGroup}" && ${TEST} ${_rangeStartGroup} -gt ${intGroup}; then
								_rangeStartLTshortVersion=false
								break
							fi
							if ${TEST} -n "${_rangeEndGroup}" \
							&& ${TEST} ! "${_rangeEndGTshortVersion}" = "true" \
							&& ${TEST} ${_rangeEndGroup} -gt ${intGroup}; then
								_rangeEndGTshortVersion=true
							else
								break
							fi
							_groupCounter=$((_groupCounter + 1))
						done
					if ${TEST} "${_rangeStartLTshortVersion}" = "true" \
					-a "${_rangeEndGTshortVersion}" = "true"; then
						if ${TEST} "${_branchRole}" = "any" -o "${_branchRole}" = "ANY"\
						-o "${_branchRole}" = "${_ROLE}"\
						-o "${_ROLE}" = "any"; then 
							compatibleBranches="${branch} ${compatibleBranches}"
						fi
					fi
				else
					if ${ECHO} ${shortVersion} | ${GREP} -Fq '.'; then
						${ECHO} "${branch}: branch naming incompatible with package version naming!"
						continue
					fi
					#numerically compare versions
					if ${TEST} ${_rangeStart} -lt ${shortVersion}\
					-o ${_rangeStart} -eq ${shortVersion}\
					&& ${TEST} ${_rangeEnd} -gt ${shortVersion}\
					-o ${_rangeEnd} -eq ${shortVersion}; then

						if ${TEST} "${_branchRole}" = "any"\
						-o "${_branchRole}" = "ANY"\
						-o "${_branchRole}" = "$_ROLE"\
						-o "${_ROLE}" = "any"; then
							compatibleBranches="${compatibleBranches} ${branch}"
						fi
					fi
				fi
			done
		if ${TEST} -z "${compatibleBranches}"; then
			${ECHO} "Error: no compatible branches found for ${category}/${name}-${shortVersion}! Using package defaults"
			${RM} -fr "${_TEMPDIR}"
			exit 6
		fi
		#check for hostnames, best effort
		if ${TEST} -n "${HOSTNAME}"\
		-a ! "${HOSTNAME}" = "localhost"; then
			bestHostnameMatchChars=1
			bestHostnameMatch=""
			compatibleHostnames=""
			_charCounter=1
			for branch in ${compatibleBranches}
				do
					if ${TEST} $(${ECHO} "${branch}" | ${GREP} -o "_" | ${WC} -l) -gt 5; then
						#optional hostname exists in branch name
						_branchHostname=$(${ECHO} "${branch}" | ${AWK} -F "_" '{for(i=7;i<=NF;++i)print $i}')
						_charCounter=1
						for character in $(${ECHO} "${_branchHostname}" | ${GREP} -o ".") 
							do
								if ${TEST} ! "${character}" = $(${ECHO} "${HOSTNAME}" | ${CUT} -c ${_charCounter}); then
									break
								else
									_charCounter=$((_charCounter+1))
								fi
							done
					fi
					if ${TEST} ${_charCounter} -gt ${bestHostnameMatchChars}; then
						bestHostnameMatchChars=${_charCounter}
						bestHostnameMatch=${_branchHostname}
					fi
				done
			compatibleBranchesWithHostnames=""
			if ${TEST} -n "${bestHostnameMatch}"; then
				for branch in ${compatibleBranches}
					do
						if ${TEST} $(${ECHO} "${branch}"\
						| ${GREP} -o "_" | ${WC} -l) -gt 5 \
						&& ${TEST} \
						$(${ECHO} "${branch}" | ${AWK} -F "_" '{for(i=7;i<=NF;++i)print $i}') = "${bestHostnameMatch}"; then
							compatibleBranchesWithHostnames="${branch} ${compatibleBranchesWithHostnames}"
						fi
					done
				compatibleBranches=${compatibleBranchesWithHostnames}
				if ${TEST} $(${ECHO} "${compatibleBranches}" | ${GREP} -o "${bestHostnameMatch}" | ${WC} -l) -eq 1; then
					branchFound=yes
					branchName=${compatibleBranches}
				fi
					
			fi
		fi
		if ${TEST} ! "${branchFound}" = "yes"; then
			#then check for an exact match! first with exactVersion, else with shortVersion
			for branch in ${compatibleBranches}
				do
					
					if ${TEST} "$(${ECHO} ${branch} | ${AWK} -F "_" '{print $3}')" = "${exactVersion}"; then
						branchFound=yes
						branchName=${branch}
						break
					elif ${TEST} "$(${ECHO} ${branch} | ${AWK} -F "_" '{print $3}')" = "${shortVersion}"; then
						branchFound=yes
						branchName=${branch}
						break
					fi
				done
			#if the branch is still not found, select the best compatible branch in range.
			branch=$(${ECHO} "${compatibleBranches}" | ${AWK} -F " " '{print $1}')
			branchVersion=$(${ECHO} "${branch}" | ${AWK} -F "_" '{print $3}'| ${TR} -dc '[0-9].') 
			if ! ${ECHO} "${shortVersion}" | ${GREP} -Fq '.'; then
				#compare integers
				versionDistance=$(($shortVersion - $branchVersion))
				versionDistance=${versionDistance#-}
				minimumDistance=${versionDistance}
				bestBranch=${branch}
				for branch in ${compatibleBranches}
					do
						branchVersion=$(${ECHO} "${branch}" | ${AWK} -F "_" '{print $3}' | ${TR} -dc '[0-9].')
						versionDistance=$(($shortVersion - $branchVersion))
						versionDistance=${versionDistance#-}
						if ${TEST} ${versionDistance} -lt ${minimumDistance}; then
							minimumDistance=${versionDistance}
							bestBranch=${branch}
						fi
							
					done
				branchFound=yes
				branchName=${bestBranch}
			else
				#dots in version numbers!
				bestBranch=${branch}
				_branches=${compatibleBranches}
				groupCounter=1
				for intGroup in $(${ECHO} "${shortVersion}" | ${AWK} -F "." '{print $0}')
					do
						bestBranchGroup="${_branches}"
						minimumDistance=$(( $(${ECHO} "${shortVersion}" | ${AWK} -F "." -v fieldnum="${groupCounter}" '{print $fieldnum}') - $(${ECHO} "${_branches}" | ${AWK} -F " " '{print $1}' | ${AWK} -F "_" '{print $3}' | ${TR} -dc '[0-9].' | ${AWK} -F "." -v fieldnum="${groupCounter}" '{print $fieldnum}') ))
						miniumDistance=${minimumDistance#-}
						branchCounter=1
						for branch in ${_branches}
							do
								groupDistance=$(( $(${ECHO} "${shortVersion}" | ${AWK} -F "." -v fieldnum="${groupCounter}" '{print $fieldnum}') - $(${ECHO} "${_branches}" | ${AWK} -F " " -v fieldnum="${branchCounter}" '{print $fieldnum}' | ${AWK} -F "_" '{print $3}' | ${TR} -dc '[0-9].' | ${AWK} -F "." -v fieldnum="${groupCounter}" '{print $fieldnum}') ))
								groupDistance=${groupDistance#-}
								if ${TEST} ${groupDistance} -lt ${minimumDistance}; then
									minimumDistance=${groupDistance}
									bestBranchGroup=${branch}
								elif ${TEST} ${groupDistance} -eq ${minimumDistance}; then
									bestBranchGroup="${bestBranchGroup} ${branch}"
								fi
								branchCounter=$((branchCounter + 1))
							done
						_branches=${bestBranchGroup}
						groupCounter=$((groupCounter + 1))
					done
					if ${TEST} -n "${_branches}"; then
					#I should always have one and only one branch in _branches at the end...
						bestBranch=$(${ECHO} "${_branches}" | ${AWK} -F " " '{print $1}')
						branchFound=yes
					fi
				branchName=${bestBranch}	
			fi		
		fi
	fi
	if ${TEST} ${branchFound} = "yes" -a ${exitcode} -eq 0; then
		branchName=$(${ECHO} ${branchName} | ${SED} 's/ //g')
		${ECHO} "About to use remote branch ${branchName}"
		case "${_VCS}" in
			"git")
				execute "git --git-dir=\"${_TEMPDIR}/.git\" --work-tree=\"${_TEMPDIR}/work\" clone -b \"${branchName}\" \"${_REMOTE}\""
				exitcode=$?
				;;
			"subversion")
				execute "svn co \"${_REMOTE}/${branchName}\" \"${_TEMPDIR}/work\""
				exitcode=$?
				if ${TEST} ${exitcode} -eq 0; then
					${RM} -fr "${_TEMPDIR}/work/.svn"
					exitcode=$?
				fi
				;;
			"mercurial")
					execute "hg -R \"${_TEMPDIR}/work\" update -C \"${branchName}\""
					exitcode=$?
					if ${TEST} ${exitcode} -eq 0; then
						${RM} -fr "${_TEMPDIR}/work/.hg"
						exitcode=$?
					fi
				;;
		esac
		if ${TEST} ${exitcode} -eq 0; then
			${FIND} "${_TEMPDIR}/work" -type f -print \
			| while read line
				do relativePath=\
					$(${ECHO} "${line}" \
					| ${AWK} -F "${_TEMPDIR}/work" '{print $2}')
					${MKDIR} -p "${relativePath}" 2>/dev/null
					${RMDIR} "${relativePath}" 2>/dev/null
					${CP} -v -f "${line}" "${relativePath}"
					cpexitcode=$?
					${CHMOD} 0600 "${relativePath}"
					if ${TEST} ! ${cpexitcode} -eq 0; then
						exitcode=5;
					fi
				done  
		fi
	fi
	${RM} -fr "${_TEMPDIR}"
	if ${TEST} ! ${exitcode} -eq 0; then
		${ECHO} "Error deploying configuration for ${category}/${name}: using package defaults"
	fi
	;;
*)
	${ECHO} "Usage: ./+VERSIONING REGISTER|CHECKOUT|CHECKOUT-FIRST [examplefile]"
	${ECHO} "Usage: ./+VERSIONING MERGE [examplefile] [firstrevision]"
	${ECHO} "Usage: ./+VERSIONING COMMIT [message]"
	${ECHO} "Usage: ./+VERSIONING PREPARE"
	${ECHO} "Usage: ./+VERSIONING PULL PKGPATH PKGVERSION PKGNAME"
	exitcode=3
	;;
esac
exit $exitcode

EOF
	${SED} -n "/^\# VERSIONING: /p" "${SELF}" >> ./+VERSIONING
	${CHMOD} +x ./+VERSIONING
	;;
esac
