#!/bin/sh
usage () {
	echo "Usage: pkgconftrack [-p PREFIX] [-m commit message] store packagename [... packagenames]"
}
extractAdditionalFiles() {
#TODO: parse files for includes
}

store() {
	if test ! -f $1; then
		echo "Can't access file $1"
		return 1
	fi
	if test -d "$2" -a -w "$2"; then
		_dir=$(dirname $1)
		if [ ! -d "$2/user/$_dir" ]; then
			mkdir -p "$2/user/$_dir";
		fi
		cp -f "$1" "$2/user/$1"
		case $3 in
			"rcs"|"RCS")
				rcs -U "$2/user/$1" > /dev/null
				echo "pkgconftrack $_MESSAGE""." | ci -u "$2/user/$1"
				return $?
				;;
			"cvs"|"CVS")
				if [ "$4" = "no" -o "$4" = "NO" ]; then
					_CVSROOT="$2/CVSROOT"
				else
					_CVSROOT="$4"
				fi
				cd "$2/user"
				_status=0	
				IFS="/"
				for curdir in $1
					do
						cvs -d "$_CVSROOT" add "$curdir"; _status=$?; cd "$curdir" 2>/dev/null
						if [ ! "$_status" -eq 0 ]; then
							return 1
						fi
					done
				;;
			"git"|"GIT")
				cd "$2"
				git --git-dir="$2/.git" --work-tree="$2" add -f "$2/user/$1"
				return $?
				;;
			"hg"|"HG"|"mercurial")
				cd "$2"
				hg --repository "$2" add "$2/user/$1"
				return $?
				;;
			"svn"|"SVN")
				cd "$2/user"
				IFS="/"
				_status=0
				for curdir in $1
					do
						svn add --force --depth=empty "$curdir"; _status=$?; cd "$curdir" 2>/dev/null
						if [ ! "$_status" -eq 0 ]; then
							return 1
						fi
					done
				;;
			*)
				echo "Unsupported versioning system: $3"
				return 1
				;;
		esac		
	else
		echo "Can't use a working directory at VCSDIR: $2"
		return 1
	fi
	
}

commit() {
	if test -d "$2" -a -w "$2"; then
		cd "$2"
		#cd VCSDIR
		_COMMITMESSAGE="$1"
		case $3 in
			"rcs"|"RCS")
				#do nothing
				;;
			"cvs"|"CVS")
				if [ "$4" = "no" -o "$4" = "NO" ]; then
					_CVSROOT="$2/CVSROOT"
				else
					_CVSROOT="$4"
				fi
				cvs -Q -d "$_CVSROOT" commit -R -m "$_COMMITMESSAGE"
				;;
			"git"|"GIT")
				git --git-dir="$2/.git" --work-tree="$2" commit -m "$_COMMITMESSAGE"
				if [ "$4" != "no" -a "$4" != "NO" ]; then
					git --git-dir="$2/.git" --work-tree="$2" push origin master
				fi
				;;
			"hg"|"HG"|"mercurial")
				hg --repository "$2" commit -m "$_COMMITMESSAGE" --user pkgconftrack
				if [ "$4" != "no" -a "$4" != "NO" ]; then
					hg --repository "$2" push "$4"
				fi
				;;
			"svn"|"SVN")
				cd "$2/user"
				svn commit -m "$_COMMITMESSAGE"
				;;
			*)
				echo "pkgconfrack: commit: $3: unsupported VCS"
				;;
		esac
	else
		echo "Can't access VCSDIR at $2!"
		exit 1
	fi
}

_toshift=0
while getopts "p:m:" flag
do
	case $flag in
	"m"|"M")
		_MESSAGE=$OPTARG
		_toshift=$((_toshift + 2))
		;;
	"p"|"P")
		_PREFIX=$OPTARG
		_toshift=$((_toshift +2))
		;;	
	esac
done
shift $_toshift
if [ -z "$_PREFIX" ]; then
	_PREFIX=/usr/pkg
fi
if [ -z "$_MESSAGE" ]; then
	_MESSAGE=$(date)
fi

_VCSDIR="$VCSDIR"
if [ -z "$_VCSDIR" ]; then
	_VCSDIR=$(${_PREFIX}/sbin/pkg_admin config-var VCSDIR)
fi
_VCSDIR="${_VCSDIR:-/var/confrepo}"

_REMOTEVCS="$REMOTEVCS"
if [ -z "$_REMOTEVCS" ]; then
	_REMOTEVCS=$(${_PREFIX}/sbin/pkg_admin config-var REMOTEVCS)
fi
_REMOTEVCS="${_REMOTEVCS:-no}"

_VCS="$VCS"
if [ -z "$_VCS" ]; then
	_VCS=$(${_PREFIX}/sbin/pkg_admin config-var VCS)
fi
_VCS="${_VCS:-rcs}"

echo "prefix: $_PREFIX, VCSDIR: $_VCSDIR, VCS: $_VCS, REMOTEVCS: $_REMOTEVCS"

ACTION=$1
PACKAGES=""
while [ $# -gt 1 ] 
	do
		PACKAGES="$2 $PACKAGES"
		shift 1
	done

case $ACTION in
store|STORE)
	_status=0
	for _PACKAGE in $PACKAGES
		do
			_pkgdbpath=$(${_PREFIX}/sbin/pkg_info -E "$_PACKAGE")
			if [ $? -eq 0 ]; then
				echo "Storing configuration files for $_PACKAGE"
				_LOCALBASE="$(${_PREFIX}/sbin/pkg_info -Q LOCALBASE "$_PACKAGE")"
				_filesList="$(${_PREFIX}/sbin/pkg_info -i "$_PACKAGE" | sed -n "/^\# FILE: [/\.A-z]* [cf][^r]/{s/^\# FILE: //;p;}" | awk -v pre="$_LOCALBASE" '{printf "%s/%s", pre, $1}')"
				for file in $_filesList
					do
						extractAdditionalFiles "$file"
					done
				_filesList="$_filesList $_includedFilesList"
				for file in $_filesList
					do
						store "$file" "$_VCSDIR" "$_VCS" "$_REMOTEVCS"
						if [ ! $? -eq 0 ]; then
							_status=1
						fi
					done
			else
				echo "Package not found:" "$_PACKAGE" "in the pkgdb for" "$_PREFIX"
			fi
		done	
		if [ $_status -eq 0 ]; then
			commit "pkgconftrack $_MESSAGE" "$_VCSDIR" "$_VCS" "$_REMOTEVCS"
		else
			echo "Failed to store configuration files"
		fi 
	;;
*)
	echo "$ACTION: unknown action"
	usage
	;;
esac
