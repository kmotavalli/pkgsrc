#!/bin/sh
usage () {
	echo "Usage: pkgconftrack [-p PREFIX] [-m commit message] store packagename [... packagenames]"
}
extractAdditionalFiles() {
#TODO: parse files for includes
}
execute()
{
	if test "$USER" = "root"; then
		su -m pkgvcsconf -c "$1"
		return $?
	else
		eval $1
		return $?
	fi
}

pkgchown()
{
	_restoreDir="$(${PWD_CMD})"
	if ${TEST} -d "$1"; then
		if ${TEST} -n "$(${FIND} "$1" -perm -2000 -or -perm -4000 -print -quit 2>/dev/null)"; then
			${ECHO} "SUID/SGID files under "$1", refusing to run CHOWN -R"
		else
			${CHMOD} 700 "$1"
			${CHOWN} -R pkgvcsconf:pkgvcsconf "$1"
		fi
	fi
	if ${TEST} -f "$1"; then
		if ${TEST} -u "$1" -o -g "$1"; then
			${ECHO} "SUID/SGID file at "$1", refusing to chown it"
		else
			${CHMOD} 600 "$1"
			${CHOWN} pkgvcsconf:pkgvcsconf "$1"
			if ! execute "${TEST} -r \"$1\" -a -w \"$1\""; then
				${CHMOD} 700 "$_VCSDIR"
				${CHOWN} -R pkgvcsconf:pkgvcsconf "$_VCSDIR"
				${CHMOD} 600 "$1"
			fi
		fi
		_dirs=$(${DIRNAME} "$1")
	else
		_dirs="$1"
	fi
	_dirsplit=$(${ECHO} "$_dirs" | ${AWK} -F "$_VCSDIR" '{print $2}'| ${TR} "/" " " )
	cd "$_VCSDIR"
	for dir in $_dirsplit
		do
			if ${TEST} -d "$dir"; then
					if ! execute "${TEST} -r \"$dir\" -a -w \"$dir\""; then
						${CHMOD} 700 "$dir"
						${CHOWN} pkgvcsconf:pkgvcsconf "$dir"
					fi
					cd "$dir"
			fi
		done
	cd "$_restoreDir"
}
if [ "$USER" = "root" ]; then
	drop=$(which true)
else
	drop=$(which false)
fi
store() {
	if test ! -f $1; then
		echo "Can't access file $1"
		return 1
	fi
	if test -d "$2" -a -w "$2"; then
		if $drop; then
			pkgchown "$2"
		fi
		_dir=$(dirname $1)
		if [ ! -d "$2/user/$_dir" ]; then
			execute "mkdir -p \"$2/user/$_dir\"";
		fi
		cp -f "$1" "$2/user/$1"
		if $drop; then
			pkgchown "$2/user/$1"
		fi
		case $3 in
			"rcs"|"RCS")
				execute "rcs -U \"$2/user/$1\" > /dev/null"
				execute "echo \"pkgconftrack $_MESSAGE\"\".\" | ci -u \"$2/user/$1\""
				return $?
				;;
			"cvs"|"CVS")
				if [ "$4" = "no" -o "$4" = "NO" ]; then
					_CVSROOT="$2/CVSROOT"
				else
					_CVSROOT="$4"
				fi
				cd "$2/user"
				_status=0
				OLDIFS="$IFS"
				IFS="/"
				for curdir in $1
					do
						execute "cvs -d \"$_CVSROOT\" add \"$curdir\""
						if [ ! $? -eq 0 ]; then
							return 1
						else
							cd "$curdir" 2>/dev/null
						fi
					done
				IFS="$OLDIFS"
				;;
			"git"|"GIT")
				cd "$2"
				execute "git --git-dir=\"$2/.git\" --work-tree=\"$2\" add -f \"$2/user/$1\""
				return $?
				;;
			"hg"|"HG"|"mercurial")
				cd "$2"
				execute "hg --repository \"$2\" add \"$2/user/$1\""
				return $?
				;;
			"svn"|"SVN")
				cd "$2/user"
				OLDIFS="$IFS"
				IFS="/"
				_status=0
				for curdir in $1
					do
						execute "svn add --force --depth=empty \"$curdir\""
						if [ ! $? -eq 0 ]; then
							return 1
						else
							cd "$curdir" 2>/dev/null
						fi
					done
				IFS="$OLDIFS"
				;;
			*)
				echo "Unsupported versioning system: $3"
				return 1
				;;
		esac		
	else
		echo "Can't use a working directory at VCSDIR: $2"
		return 1
	fi
	
}

commit() {
	if test -d "$2" -a -w "$2"; then
		cd "$2"
		if $drop; then
			pkgchown "$2"
		fi
		_COMMITMESSAGE="$1"
		case $3 in
			"rcs"|"RCS")
				#do nothing
				return 0
				;;
			"cvs"|"CVS")
				if [ "$4" = "no" -o "$4" = "NO" ]; then
					_CVSROOT="$2/CVSROOT"
				else
					_CVSROOT="$4"
				fi
				execute "cvs -Q -d \"$_CVSROOT\" commit -R -m \"$_COMMITMESSAGE\""
				return $?
				;;
			"git"|"GIT")
				execute "git --git-dir=\"$2/.git\" --work-tree=\"$2\" commit -m \"$_COMMITMESSAGE\""
				_gitStatus=$?
				if [ "$4" != "no" -a "$4" != "NO" -a $_gitStatus -eq 0 ]; then
					execute "git --git-dir=\"$2/.git\" --work-tree=\"$2\" push origin master"
					_gitStatus=$?
				fi
				return $_gitStatus
				;;
			"hg"|"HG"|"mercurial")
				execute "hg --repository \"$2\" commit -m \"$_COMMITMESSAGE\" --user pkgconftrack"
				_hgStatus=$?
				if [ "$4" != "no" -a "$4" != "NO" -a $_hgStatus -eq 0 ]; then
					execute "hg --repository \"$2\" push \"$4\""
					_hgStatus=$?
				fi
				return $_hgStatus
				;;
			"svn"|"SVN")
				cd "$2/user"
				execute "svn commit -m \"$_COMMITMESSAGE\""
				return $?
				;;
			*)
				echo "pkgconfrack: commit: $3: unsupported VCS"
				return 1
				;;
		esac
	else
		echo "Can't access VCSDIR at $2!"
		exit 1
	fi
}

_toshift=0
while getopts "p:m:" flag
do
	case $flag in
	"m"|"M")
		_MESSAGE=$OPTARG
		_toshift=$((_toshift + 2))
		;;
	"p"|"P")
		_PREFIX=$OPTARG
		_toshift=$((_toshift +2))
		;;	
	esac
done
shift $_toshift
if [ -z "$_PREFIX" ]; then
	_PREFIX=/usr/pkg
fi
if [ -z "$_MESSAGE" ]; then
	_MESSAGE=$(date)
fi

_VCSDIR="$VCSDIR"
if [ -z "$_VCSDIR" ]; then
	_VCSDIR=$(${_PREFIX}/sbin/pkg_admin config-var VCSDIR)
fi
_VCSDIR="${_VCSDIR:-/var/confrepo}"

_REMOTEVCS="$REMOTEVCS"
if [ -z "$_REMOTEVCS" ]; then
	_REMOTEVCS=$(${_PREFIX}/sbin/pkg_admin config-var REMOTEVCS)
fi
_REMOTEVCS="${_REMOTEVCS:-no}"

_VCS="$VCS"
if [ -z "$_VCS" ]; then
	_VCS=$(${_PREFIX}/sbin/pkg_admin config-var VCS)
fi
_VCS="${_VCS:-rcs}"

echo "prefix: $_PREFIX, VCSDIR: $_VCSDIR, VCS: $_VCS, REMOTEVCS: $_REMOTEVCS"

ACTION=$1
PACKAGES=""
while [ $# -gt 1 ] 
	do
		PACKAGES="$2 $PACKAGES"
		shift 1
	done

case $ACTION in
store|STORE)
	_status=0
	for _PACKAGE in $PACKAGES
		do
			_pkgdbpath=$(${_PREFIX}/sbin/pkg_info -E "$_PACKAGE")
			if [ $? -eq 0 ]; then
				echo "Storing configuration files for $_PACKAGE"
				_LOCALBASE="$(${_PREFIX}/sbin/pkg_info -Q LOCALBASE "$_PACKAGE")"
				_filesList="$(${_PREFIX}/sbin/pkg_info -i "$_PACKAGE" | sed -n "/^\# FILE: [/\.A-z]* [cf][^r]/{s/^\# FILE: //;p;}" | awk -v pre="$_LOCALBASE" '{printf "%s/%s", pre, $1}')"
				for file in $_filesList
					do
						extractAdditionalFiles "$file"
					done
				_filesList="$_filesList $_includedFilesList"
				for file in $_filesList
					do
						store "$file" "$_VCSDIR" "$_VCS" "$_REMOTEVCS"
						if [ ! $? -eq 0 ]; then
							_status=1
						fi
					done
			else
				echo "Package not found:" "$_PACKAGE" "in the pkgdb for" "$_PREFIX"
			fi
		done	
		if [ $_status -eq 0 ]; then
			commit "pkgconftrack $_MESSAGE" "$_VCSDIR" "$_VCS" "$_REMOTEVCS"
			exit $?
		else
			echo "Failed to store configuration files"
		fi 
	;;
*)
	echo "$ACTION: unknown action"
	usage
	exit 2
	;;
esac
